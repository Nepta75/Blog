{"ast":null,"code":"var _jsxFileName = \"/home/lokman/cours/Blog/front/blog/src/components/admin/PostDetailsAdmin/PostDetailsAdmin.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { useParams } from 'react-router';\nimport { useHistory } from \"react-router-dom\";\nimport { PostDetailsAdminStyled } from './PostDetailsAdmin.style';\nimport { getRessource, deleteRessource, updateRessource, createRessource } from '../../../services/apiServices';\nimport { PostForm } from './PostForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostDetailsAdmin = () => {\n  _s();\n\n  const {\n    postId\n  } = useParams();\n  const [inputs, setInputs] = useState({});\n  const history = useHistory();\n\n  const handleInputChange = event => {\n    event.persist();\n    setInputs(inputs => ({ ...inputs,\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  const getValue = name => {\n    return inputs[name] || \"\";\n  };\n\n  useEffect(() => {\n    if (postId) {\n      const fetchMyAPI = async () => {\n        const data = await getRessource('post', postId);\n\n        if (data) {\n          setInputs({\n            title: data.title,\n            id: data._id,\n            titleDesc: data.title_description,\n            imageUrl: data.image,\n            content: data.contenu\n          });\n        }\n      };\n\n      fetchMyAPI();\n    }\n  }, [postId]);\n  return /*#__PURE__*/_jsxDEV(PostDetailsAdminStyled, {\n    children: postId ? getValue(\"id\") ? /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(PostForm, {\n        handleInputChange: handleInputChange,\n        getValue: getValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => updateRessource('post', getValue(\"id\"), {\n            title: getValue(\"title\"),\n            title_description: getValue(\"titleDesc\"),\n            image: getValue(\"imageUrl\"),\n            _id: getValue(\"id\"),\n            contenu: getValue(\"content\")\n          }),\n          type: \"submit\",\n          children: \"Mettre \\xE0 jour\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteRessource('post', getValue(\"id\")),\n          type: \"submit\",\n          children: \"Supprimer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [\"Aucun r\\xE9sultat post avec l'id: \", postId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(PostForm, {\n        handleInputChange: handleInputChange,\n        getValue: getValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            createRessource('post', {\n              title: getValue(\"title\"),\n              title_description: getValue(\"titleDesc\"),\n              image: getValue(\"imageUrl\"),\n              contenu: getValue(\"content\")\n            });\n            history.push('/admin');\n          },\n          type: \"submit\",\n          children: \"Ajouter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostDetailsAdmin, \"CGrVvaojVVeRoOgjszgrBk5ezEk=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = PostDetailsAdmin;\nexport { PostDetailsAdmin };\n\nvar _c;\n\n$RefreshReg$(_c, \"PostDetailsAdmin\");","map":{"version":3,"sources":["/home/lokman/cours/Blog/front/blog/src/components/admin/PostDetailsAdmin/PostDetailsAdmin.jsx"],"names":["React","useState","useEffect","Fragment","useParams","useHistory","PostDetailsAdminStyled","getRessource","deleteRessource","updateRessource","createRessource","PostForm","PostDetailsAdmin","postId","inputs","setInputs","history","handleInputChange","event","persist","target","name","value","getValue","fetchMyAPI","data","title","id","_id","titleDesc","title_description","imageUrl","image","content","contenu","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { useParams } from 'react-router';\nimport { useHistory } from \"react-router-dom\";\nimport { PostDetailsAdminStyled } from './PostDetailsAdmin.style';\nimport { getRessource , deleteRessource, updateRessource, createRessource } from '../../../services/apiServices';\nimport { PostForm } from './PostForm';\n\nconst PostDetailsAdmin = () => {\n  const { postId } = useParams();\n  const [inputs, setInputs] = useState({});\n  const history = useHistory();\n\n  const handleInputChange = (event) => {\n    event.persist();\n    setInputs(inputs => ({...inputs, [event.target.name]: event.target.value}));\n  }\n\n  const getValue = (name) => {\n    return inputs[name] || \"\";\n  }\n\n  useEffect(() => {\n    if (postId) {\n      const fetchMyAPI = async () => {\n        const data = await getRessource('post', postId);\n        if (data) {\n          setInputs({\n            title: data.title,\n            id: data._id,\n            titleDesc: data.title_description,\n            imageUrl: data.image,\n            content: data.contenu,\n          });\n        }\n      }\n      fetchMyAPI();\n    }\n  }, [postId]);\n\n  return (\n    <PostDetailsAdminStyled>\n      {postId ?\n       getValue(\"id\") ?\n        <Fragment>\n          <PostForm \n            handleInputChange={handleInputChange}\n            getValue={getValue}\n          />\n          <div className=\"button-container\">\n            <button\n              onClick={() => updateRessource('post', getValue(\"id\"), {\n                title: getValue(\"title\"),\n                title_description: getValue(\"titleDesc\"),\n                image: getValue(\"imageUrl\"),\n                _id: getValue(\"id\"),\n                contenu: getValue(\"content\"),\n              })}\n              type=\"submit\"\n            >\n              Mettre Ã  jour\n            </button>\n            <button\n              onClick={() => deleteRessource('post', getValue(\"id\"))}\n              type=\"submit\"\n            >\n              Supprimer\n            </button>\n          </div>\n        </Fragment>\n        :\n        <Fragment>\n          Aucun rÃ©sultat post avec l'id: {postId}\n        </Fragment>\n      :\n        <Fragment>\n          <PostForm \n            handleInputChange={handleInputChange}\n            getValue={getValue}\n          />\n          <div className=\"button-container\">\n            <button\n              onClick={() => {\n                createRessource('post', {\n                  title: getValue(\"title\"),\n                  title_description: getValue(\"titleDesc\"),\n                  image: getValue(\"imageUrl\"),\n                  contenu: getValue(\"content\"),\n                });\n                history.push('/admin');\n              }}\n              type=\"submit\"\n            >\n              Ajouter\n            </button>\n          </div>\n        </Fragment>\n      }\n    </PostDetailsAdminStyled>\n  );\n};\n\nexport { PostDetailsAdmin };\n"]},"metadata":{},"sourceType":"module"}