{"ast":null,"code":"var _jsxFileName = \"/home/lokman/cours/Blog/front/blog/src/pages/admin/PostAdminPage/PostAdminPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { PostAdminPageStyled } from './PostAdminPage.style';\nimport { getRessources, deleteRessource } from '../../../services/apiServices';\nimport { Button } from '../../../components/ui-elements/Button/Button';\nimport { PostInfo } from '../../../components/PostInfo/PostInfo';\nimport { checkIfAdminByUserId } from '../../../utils/checkIfAdminByUserId';\nimport { PostCreate } from './PostCreate';\nimport { PostEdit } from './PostEdit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostAdminPage = () => {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const history = useHistory();\n  const params = useParams();\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      const isAdmin = await checkIfAdminByUserId();\n\n      if (!isAdmin) {\n        history.push('/');\n      }\n\n      const response = await getRessources('post');\n      setPosts(response);\n    };\n\n    fetchMyAPI();\n  }, []);\n\n  const removePost = id => {\n    deleteRessource('post', id).then(data => {\n      if (data.success) {\n        const newPost = posts.filter(post => post._id !== id);\n        setPosts(newPost);\n      }\n    });\n  };\n\n  let render = /*#__PURE__*/_jsxDEV(PostEdit, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 16\n  }, this);\n\n  if (params.postId) {\n    render = /*#__PURE__*/_jsxDEV(PostCreate, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 14\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PostAdminPageStyled, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setRender( /*#__PURE__*/_jsxDEV(PostCreate, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 40\n      }, this)),\n      children: \"Ajouter un post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Liste des Posts: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), posts && posts.length > 0 ? posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin__posts-container\",\n      children: [/*#__PURE__*/_jsxDEV(PostInfo, {\n        postId: post._id,\n        title: post.title,\n        description: post.title_description,\n        imageUrl: post.image,\n        content: post.contenu\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin__posts-container__button-container\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          onClick: () => removePost(post._id),\n          value: \"supprimer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          onClick: () => history.push(`/admin/post/${post._id}`),\n          value: \"modifier\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }, this)]\n    }, post._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)) : /*#__PURE__*/_jsxDEV(Fragment, {\n      children: \"Aucun post pour le moment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostAdminPage, \"SAtuH+R+LmOFmNDhVzcTlN1gGko=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = PostAdminPage;\nexport { PostAdminPage };\n\nvar _c;\n\n$RefreshReg$(_c, \"PostAdminPage\");","map":{"version":3,"sources":["/home/lokman/cours/Blog/front/blog/src/pages/admin/PostAdminPage/PostAdminPage.jsx"],"names":["React","Fragment","useEffect","useState","useHistory","useParams","PostAdminPageStyled","getRessources","deleteRessource","Button","PostInfo","checkIfAdminByUserId","PostCreate","PostEdit","PostAdminPage","posts","setPosts","history","params","fetchMyAPI","isAdmin","push","response","removePost","id","then","data","success","newPost","filter","post","_id","render","postId","setRender","length","map","title","title_description","image","contenu"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { PostAdminPageStyled } from './PostAdminPage.style';\nimport { getRessources, deleteRessource } from '../../../services/apiServices'\nimport { Button } from '../../../components/ui-elements/Button/Button';\n\nimport { PostInfo } from '../../../components/PostInfo/PostInfo';\nimport { checkIfAdminByUserId } from '../../../utils/checkIfAdminByUserId';\nimport { PostCreate } from './PostCreate';\nimport { PostEdit } from './PostEdit';\n\nconst PostAdminPage = () => {\n  const [posts, setPosts] = useState([]);\n  const history = useHistory();\n  const params = useParams();\n\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      const isAdmin = await checkIfAdminByUserId();\n      if (!isAdmin) {\n        history.push('/');\n      }\n      const response = await getRessources('post');\n      setPosts(response);\n    }\n\n    fetchMyAPI();\n  }, []);\n\n  const removePost = (id) => {\n    deleteRessource('post', id).then(data => {\n      if (data.success) {\n        const newPost = posts.filter(post => post._id !== id);\n        setPosts(newPost);\n      }\n    })\n  }\n\n  let render = <PostEdit />;\n\n  if (params.postId) {\n    render = <PostCreate />\n  }\n\n\n  return (\n    <PostAdminPageStyled>\n      <button onClick={() => setRender(<PostCreate />)}>\n        Ajouter un post\n      </button>\n      <h1>Liste des Posts: </h1>\n      { posts && posts.length > 0 ?\n          posts.map(post => (\n            <div key={post._id} className=\"admin__posts-container\">\n              <PostInfo\n                postId={post._id}\n                title={post.title}\n                description={post.title_description}\n                imageUrl={post.image}\n                content={post.contenu}\n              />\n              <div className=\"admin__posts-container__button-container\">\n                <Button\n                  type=\"submit\"\n                  onClick={() => removePost(post._id)}\n                  value={\"supprimer\"}\n                />\n                <Button\n                  type=\"submit\"\n                  onClick={() => history.push(`/admin/post/${post._id}`)}\n                  value=\"modifier\"\n                />\n              </div>\n            </div>\n          ))\n        :\n        <Fragment>\n          Aucun post pour le moment\n        </Fragment>\n      }\n    </PostAdminPageStyled>\n  );\n};\n\nexport { PostAdminPage };\n"]},"metadata":{},"sourceType":"module"}